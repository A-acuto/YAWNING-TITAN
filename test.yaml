RED_AGENT:
  # Red agent's skill modifier
  red_skill: 0.5
  # Is true if red agent will use the skill modifier when attacking a node
  red_use_skill: true
  # Is true if red agent will ignore node defences
  red_ignore_defences: false
  # Is true if red agent will always succeed when attacking
  red_always_succeeds: false
  # Is true if red agent can only attack from its current position
  red_attack_from_current_position: false
  # Is true if red can attack any safe node anywhere in the network
  red_attack_from_any_node: true
  # Is true if red can naturally spread every timestep
  red_naturally_spread: true
  # Chance of red agent spreading to a connected safe node
  red_chance_to_spread_to_connected_node: 0.01
  # Chance of red agent spreading to an unconnected safe node
  red_chance_to_spread_to_unconnected_node: 0.005
  # Is true if red can try to spread to every connected safe node
  red_spread_action: false
  # Chance of red agent to try and spread to every connected safe node
  red_spread_action_likelihood: 1
  # Chance for red agent spread action to succeed
  red_spread_success_chance: 0.1
  # Is true if red agent can attack any safe node in the network
  red_random_infection_action: false
  # Chance of the red agent attacking any random safe node
  red_random_infection_likelihood: 1
  # Chance of the random safe node attacks from succeeding
  red_random_infection_success_chance: 0.1
  # Is true if red uses a basic attack to take over a safe node connected to an infected node
  red_basic_attack_action: true
  # Chance of the basic attack succeeding
  red_basic_attack_likelihood: 1
  # Is true if the red agent can choose to do nothing
  red_do_nothing_action: true
  # Chance of the red agent from doing nothing
  red_do_nothing_likelihood: 1
  # Is true if the red agent can choose to move to another infected node
  red_move_action: false
  # Chance of red agent choosing to move to another infected node
  red_move_action_likelihood: 1
  # Is true if the red agent can use a zero day to infect a node with 100% success
  red_zero_day_action: true
  # Integer value specifying how many zero days the red agent can use at the start of the game
  red_zero_day_start_amount: 1
  # Integer value specifying how many timesteps is needed until the red agent can get another zero day
  red_zero_day_days_required_to_create: 10
  # Is true if the red agent targets safe nodes at random
  red_targeting_random: false
  # Is true if the red agent prioritises attacking nodes with the most connections
  red_targeting_prioritise_connected_nodes: true
  # Is true if the red agent prioritises attacking nodes with the least connections
  red_targeting_prioritise_unconnected_nodes: false
  # Is true if the red agent prioritises attacking nodes with the most vulnerability
  red_targeting_prioritise_vulnerable_nodes: false
  # Is true if the red agent prioritises attacking nodes with the least vulnerability
  red_targeting_prioritise_resilient_nodes: false
BLUE_AGENT:
  # Integer value specifying how many deceptive nodes the blue agent can place in the network
  blue_max_deceptive_nodes: 2
  # Chance for the blue agent to immediately discover the node compromised by the red agent
  blue_immediate_detection_chance: 0.5
  # Chance for the blue agent to discover a compromised node on scan
  blue_scan_detection_chance: 0.7
  # Chance for the blue agent to immediately discover that a deceptive node has been compromised
  blue_deception_immediate_detection_chance: 1
  # Chance for the blue agent to discover that a deceptive node has been compromised on scan
  blue_deception_scan_detection_chance: 1
  # Is true if blue agent can discover failed attacks
  blue_discover_failed_attacks: true
  # Is true if the blue agent can learn information about an attack that succeeds if the compromise is known
  blue_discover_attack_source_if_detected: true
  # Is true if the blue agent can learn information about an attack that succeeds if the compromise is not known
  blue_discover_attack_source_if_not_detected: true
  # Chance for blue to discover information about a failed attack
  blue_chance_to_discover_source_failed: 0.5
  # Chance for blue to discover information about an attack that succeeded and the compromise was known
  blue_chance_to_discover_source_succeed_known: 0.3
  # Chance for blue to discover information about an attack that succeeded and the compromise was not known
  blue_chance_to_discover_source_succeed_unknown: 0.1
  # Chance to discover the location of a failed attack on a deceptive node
  blue_chance_to_discover_source_deceptive_failed: 1
  # Chance to discover the location of a succeeded attack against a deceptive node
  blue_chance_to_discover_source_deceptive_succeed: 1
  # Is true if blue agent can fix a node to decrease its vulnerability
  blue_make_node_safe_modifies_vuln: false
  # The amount the vulnerability score will change when blue agent fixes a node
  blue_vuln_change_amount_make_safe: 0.4
  # Is true if the vulnerability score is randomised when blue agent fixes a node
  blue_make_safe_random_vuln: true
  # Is true if blue agent will try to reduce a node's vulnerability score
  blue_reduce_vuln_action: true
  # Is true if the blue agent will try to reset the node state to what it was at the beginning of the game
  blue_restore_node_action: true
  # Is true if the blue agent will try to fix a node without resetting the node to what it was at the beginning of the game
  blue_make_node_safe_action: true
  # Is true if blue can scan all nodes in the network to detect red agent intrusions
  blue_scan_action: true
  # Is true if blue agent can isolate a node i.e. remove connections to and from a node
  blue_isolate_action: true
  # Is true if blue agent can reinstate node connections after the node is isolated
  blue_reconnect_action: true
  # Is true if the blue agent can decide to do nothing
  blue_do_nothing_action: true
  # Is true if the blue agent can use deceptive nodes
  blue_deceptive_action: true
  # Is true if the blue agent can reuse a deceptive node if it has run out of deceptive nodes it can place
  blue_deceptive_node_make_new: true
OBSERVATION_SPACE:
  # Is true if the blue agent can see the compromised status of all the nodes
  obs_compromised_status: true
  # Is true if the blue agent can see the vulnerability scores of all the nodes
  obs_node_vuln_status: true
  # Is true if blue agent can see what nodes are connected to what other nodes
  obs_node_connections: true
  # Is true if the blue agent can see the average vulnerability of all the nodes
  obs_avg_vuln: false
  # Is true if the blue agent can see a graph connectivity score
  obs_graph_connectivity: true
  # Is true if the blue agent can see all of the nodes that have recently attacked a safe node
  obs_attack_sources: true
  # Is true if the blue agent can see all the nodes that have recently been attacked
  obs_attack_targets: true
  # Is true if the blue agent can see all of the special nodes (entry nodes, high value targets)
  obs_special_nodes: false
  # Is true if the blue agent can see the skill level of the red agent
  obs_red_agent_skill: true
GAME_RULES:
  # The minimum number of nodes the game mode will be allowed to run on
  gr_min_number_of_network_nodes: 18
  # Lower bound of the node vulnerability
  gr_node_vuln_lower: 0.2
  # Upper bound of the node vulnerability
  gr_node_vuln_upper: 0.8
  # Timesteps the game will go on for
  gr_max_steps: 1000
  # Is true if the game ends when all nodes are lost
  gr_loss_total_compromise: false
  # Is true if the game ends when a percentage of nodes is compromised
  gr_loss_pc_nodes_compromised: true
  # Percentage of the nodes becoming infected for the game to be considered lost by the blue agent
  gr_loss_pc_node_compromised_pc: 0.8
  # Number of nodes to be marked as high value in network
  gr_number_of_high_value_targets: 1
  # Is true if the game ends if the high value node is lost
  gr_loss_hvt: false
  # Is true if the high value nodes are set randomly across the network
  gr_loss_hvt_random_placement: false
  # Is true if the high value nodes are set furthest away from the entry nodes
  gr_loss_hvt_furthest_away: true
  # Is true if the entry nodes will be placed randomly across the network
  gr_random_entry_nodes: true
  # Number of nodes to be marked as entry nodes in network
  gr_num_entry_nodes: 3
  # Is true if the entry nodes will be placed centrally in the network
  gr_prefer_central_entry: false
  # Is true if the entry nodes will be placed on the edges of the network
  gr_prefer_edge_nodes: false
  # Number of timesteps the blue agent has to prepare
  gr_grace_period: 3
RESET:
  # Is true if the vulnerabilities are re-randomised on reset
  reset_random_vulns: false
  # Is true if new high value nodes are chosen on reset
  reset_move_hvt: false
  # Is true if new entry nodes are chosen on reset
  reset_move_entry_nodes: false
REWARDS:
  # Reward for the blue agent losing
  reward_loss: -100
  # Reward for the blue agent winning
  reward_success: 100
  # Is true if reward is multiplied by percentage of nodes not compromised
  reward_end_multiplier: true
  # Is true if red agent rewards are reduced the closer to the end timesteps the game ends at
  reward_reduce_negative_rewards: false
  # {}
  reward_function: standard_rewards
MISCELLANEOUS:
  # Is true if the timestep data is output to JSON
  output_timestep_data_to_json: false
